#ifndef LIB_PSS_ERROR_H
#define LIB_PSS_ERROR_H 1
#include <LibShared.hpp>
#include <Sce/Pss/Core/ExceptionInfo.hpp>
#include <Sce/Pss/Core/Features.hpp>
#include <cstdint>
#include <string>
#include <iostream>
#include <source_location>


#include <mono/mono.h>

enum PsmError: uint32_t {
	PSM_ERROR_NO_ERROR = 0,
	PSM_ERROR_BASE_ERROR = 0x80010000,
	PSM_ERROR_ERROR = 0x80010001,
	PSM_ERROR_OUT_OF_MEMORY = 0x80010002,
	PSM_ERROR_INVALID_PARAMETER = 0x80010003,
	PSM_ERROR_PATH_NOT_FOUND = 0x80010004,
	PSM_ERROR_PATH_ALREADY_EXISTS = 0x80010005,
	PSM_ERROR_FILE_NOT_FOUND = 0x80010006,

	PSM_ERROR_TIMEOUT = 0x80010007,
	PSM_ERROR_OUT_OF_RANGE = 0x80010008,
	PSM_ERROR_END_OF_STREAM = 0x80010009,
	PSM_ERROR_BUFFER_FULL = 0x80010010,
	PSM_ERROR_INVALID_BUFFER = 0x80010011,
	PSM_ERROR_NOT_INITIALIZED = 0x80010012,
	PSM_ERROR_ALREADY_INITIALIZED = 0x80010013,
	PSM_ERROR_NOT_AVAILABLE = 0x80010014,
	PSM_ERROR_NOT_FOUND = 0x80010015,
	PSM_ERROR_PENDING = 0x80010016,
	PSM_ERROR_ALREADY_EXISTS = 0x80010017,
	PSM_ERROR_INVALID_HANDLE = 0x80010018,
	PSM_ERROR_OUT_OF_RESOURCES = 0x80010019,
	PSM_ERROR_ACCESS_DENIED = 0x80010020,
	PSM_ERROR_NOT_SUPPORTED = 0x80010021,
	PSM_ERROR_DISK_FULL = 0x80010022,
	PSM_ERROR_SEEK_FAILED = 0x80010023,
	PSM_ERROR_INVALID_DATA = 0x80010024,
	PSM_ERROR_INVALID_CALL = 0x80010025,
	PSM_ERROR_NOT_IMPLEMENTED = 0x80010026,
	PSM_ERROR_READ_FAILED = 0x80010027,
	PSM_ERROR_WRITE_FAILED = 0x80010028,
	PSM_ERROR_BUSY = 0x80010029,

	/* COMMON */
	PSM_ERROR_COMMON_ARGUMENT = 0x80580001,
	PSM_ERROR_COMMON_ARGUMENT_NULL = 0x80580002,
	PSM_ERROR_COMMON_ARGUMENT_OUT_OF_RANGE = 0x80580003,
	PSM_ERROR_COMMON_INVALID_OPERATION = 0x80580004,
	PSM_ERROR_COMMON_OBJECT_DISPOSED = 0x80580005,
	PSM_ERROR_COMMON_NOT_SUPPORTED = 0x80580006,
	PSM_ERROR_COMMON_INVALID_FORMAT = 0x80580007,
	PSM_ERROR_COMMON_INSUFFICIENT_MEMORY = 0x80580008,
	PSM_ERROR_COMMON_IO = 0x80580010,
	PSM_ERROR_COMMON_FILE_NOT_FOUND = 0x80580011,
	PSM_ERROR_COMMON_FILE_LOAD = 0x80580012,
	PSM_ERROR_COMMON_OUT_OF_MEMORY = 0x80580013,

	/* GRAPHICS*/
	PSM_ERROR_GRAPHICS_SYSTEM = 0x80580021,
	
	/* AUDIO */
	PSM_ERROR_AUDIO_SYSTEM = 0x80580022,
	
	/* IMAGE */
	PSM_ERROR_IMAGE_SYSTEM = 0x80580023,
	
	/* FONT */
	PSM_ERROR_FONT_SYSTEM = 0x80580024,
	
	/* INPUT */
	PSM_ERROR_INPUT_SYSTEM = 0x80580025,
	
	/* CAMERA */
	PSM_ERROR_CAMERA_SYSTEM = 0x80580027,
	
	/* LOCATION */
	PSM_ERROR_LOCATION_SYSTEM = 0x80580028

};

#ifndef DEBUGGING_UNIMPLEMENTED_IS_ERROR
#define _UNIMPLEMENETED_MACRO_BODY(msg) Shared::Debug::Logger::Todo(msg); return PSM_ERROR_NO_ERROR
#else
#define _UNIMPLEMENETED_MACRO_BODY(msg) Sce::Pss::Core::ExceptionInfo::AddMessage(msg + std::string("\n")); return PSM_ERROR_NOT_IMPLEMENTED
#endif

#define UNIMPLEMENTED_MSG(msg) \
	do { \
		_UNIMPLEMENETED_MACRO_BODY(std::string(__FUNCTION__) + std::string(msg) + " is not yet implemented."); \
	} while (0)

#define UNIMPLEMENTED()	UNIMPLEMENTED_MSG("")


#ifndef DEBUGGING_UNIMPLEMENTED_IS_ERROR
#define UNIMPLEMENTED_ERRORABLE(msg) \
		do { \
			std::string str = std::string(__FUNCTION__) + ":" + std::string(msg) + std::string(" is not yet implemented.\n"); \
			Shared::Debug::Logger::Todo(str); \
			return; \
		} while (0)
#else
#define UNIMPLEMENTED_ERRORABLE(msg) \
		do { \
			std::string str = std::string(__FUNCTION__) + ":" + std::string(msg) + std::string(" is not yet implemented.\n"); \
			Shared::Debug::Logger::Todo(str); \
			Sce::Pss::Core::ExceptionInfo::AddMessage(str); \
			this->SetError(PSM_ERROR_NOT_IMPLEMENTED); \
			return; \
		} while (0)
#endif
#define LOG_FUNCTION() Shared::Debug::Logger::Debug(std::string(__FUNCTION__));


namespace Sce::Pss::Core {
	class Error {
	public:
		static int GetExceptionInfoNative(MonoString* message, MonoString* param);
	};
}
#endif
